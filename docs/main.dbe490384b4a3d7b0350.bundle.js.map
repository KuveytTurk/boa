{"version":3,"file":"main.dbe490384b4a3d7b0350.bundle.js","sources":["webpack:///./packages/components/src/Button/Button.js"],"sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport merge from 'lodash/merge';\r\nimport MuiButton from '@material-ui/core/Button';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { ComponentBase, ComponentComposer } from '@kuveytturk/boa-base';\r\nimport { Localization } from '@kuveytturk/boa-utils';\r\nimport { Icon } from '../Icon';\r\nimport { IconButton } from '../IconButton';\r\n\r\nconst styles = () => ({\r\n  label: {\r\n    pointerEvents: 'none',\r\n  },\r\n});\r\n\r\n/**\r\n * Buttons allow users to take actions, and make choices, with a single tap.\r\n * This component is wrapped from `@material-ui/core/Button`.\r\n * It also renders an `<IconButton />` when the \"type\" prop is \"icon\".\r\n */\r\n@ComponentComposer\r\n@withStyles(styles)\r\nclass Button extends ComponentBase {\r\n  static propTypes = {\r\n    /**\r\n     * Base properties from ComponentBase.\r\n     */\r\n    ...ComponentBase.propTypes,\r\n    /**\r\n     * If `false`, content of the button is shown uppercase.\r\n     */\r\n    allowLabelCase: PropTypes.bool,\r\n    /**\r\n     * Predefined sizes of the button.\r\n     */\r\n    buttonSize: PropTypes.oneOf(['small', 'medium', 'large']),\r\n    /**\r\n     * Color of the component.\r\n     * It supports the theme colors that make sense for this component.\r\n     */\r\n    colorType: PropTypes.oneOf(['default', 'primary', 'secondary']),\r\n    /**\r\n     * Icon name from BOA icon library.\r\n     */\r\n    dynamicIcon: PropTypes.string,\r\n    /**\r\n     * Font icon name from font icon's library.\r\n     * @ignore\r\n     */\r\n    fontIcon: PropTypes.string,\r\n    /**\r\n     * If true, the button has the full width of its container.\r\n     */\r\n    fullWidth: PropTypes.bool,\r\n    /**\r\n     * Custom icon element to be rendered inside the button.\r\n     */\r\n    icon: PropTypes.any,\r\n    /**\r\n     * Icon props that are passed to the `<Icon />` element.\r\n     */\r\n    iconProperties: PropTypes.object,\r\n    /**\r\n     * If `true`, and `variant` is `'fab'`, will use mini floating action button styling.\r\n     */\r\n    mini: PropTypes.bool,\r\n    /**\r\n     * @ignore\r\n     */\r\n    onClick: PropTypes.func,\r\n    /**\r\n     * SVG Icon name from material svg icon library.\r\n     * @ignore\r\n     */\r\n    svgIcon: PropTypes.string,\r\n    /**\r\n     * Button content.\r\n     */\r\n    text: PropTypes.string,\r\n    /**\r\n     * Position of the text in the button.\r\n     * It assigns given position to text if button width is greater than the text width.\r\n     */\r\n    textPosition: PropTypes.oneOf(['center', 'left', 'right']),\r\n    /**\r\n     * Styles applied to the span element that wraps the children.\r\n     */\r\n    textStyle: PropTypes.object,\r\n    /**\r\n     * If type is 'icon', a tooltip is generated on the icon button.\r\n     */\r\n    tooltip: PropTypes.string,\r\n    /**\r\n     * Position of the button tooltip.\r\n     */\r\n    tooltipPosition: PropTypes.string,\r\n    /**\r\n     * Button type should be `contained`, `text`, `fab` or `icon`.\r\n     */\r\n    type: PropTypes.oneOf(['contained', 'text', 'fab', 'icon']).isRequired,\r\n  };\r\n\r\n  static defaultProps = {\r\n    ...ComponentBase.defaultProps,\r\n    type: 'contained',\r\n    allowLabelCase: false,\r\n    textPosition: 'center',\r\n    buttonSize: 'medium',\r\n  };\r\n\r\n  constructor(props, context) {\r\n    super(props, context);\r\n    this.state = {\r\n      disabled: props.disabled,\r\n    };\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.disabled !== this.props.disabled) {\r\n      this.setDisable(nextProps.disabled);\r\n    }\r\n  }\r\n\r\n  setDisable(value) {\r\n    this.setState({ disabled: value });\r\n  }\r\n\r\n  getLabel() {\r\n    const { allowLabelCase, text, textStyle } = this.props;\r\n    const label = allowLabelCase ? text : Localization.stringUpperCase(!text ? '' : text);\r\n    return textStyle ? <div style={textStyle}>{label}</div> : label;\r\n  }\r\n\r\n  createButtonElement(variant) {\r\n    let props = this.props;\r\n    const { textPosition, allowLabelCase, style } = this.props;\r\n\r\n    /* istanbul ignore else  */\r\n    if (variant !== 'fab') {\r\n      props = Object.assign({}, props);\r\n      const iconStyle = !this.getLabel() ? null : { marginRight: 8 };\r\n      if (props.iconProperties && props.iconProperties.style) {\r\n        props.iconProperties.style = merge(iconStyle, props.iconProperties.style);\r\n      } else {\r\n        props.iconProperties = { style: iconStyle };\r\n      }\r\n    }\r\n\r\n    const icon = Icon.getIcon(props);\r\n    const buttonStyle = {\r\n      justifyContent: textPosition === 'right' ? 'flex-end' : textPosition,\r\n      textAlign: textPosition,\r\n      textTransform: allowLabelCase ? 'none' : '',\r\n      ...style,\r\n    };\r\n\r\n    return (\r\n      <MuiButton\r\n        id={this.props.id}\r\n        classes={{\r\n          label: props.classes.label,\r\n        }}\r\n        style={buttonStyle}\r\n        fullWidth={this.props.fullWidth}\r\n        color={this.props.colorType}\r\n        disabled={this.state.disabled}\r\n        disableRipple={this.state.disabled}\r\n        onClick={this.props.onClick}\r\n        variant={variant}\r\n        size={this.props.buttonSize}\r\n        mini={this.props.mini}\r\n      >\r\n        {icon}\r\n        {this.getLabel()}\r\n        {this.props.children}\r\n      </MuiButton>\r\n    );\r\n  }\r\n\r\n  createIconButtonElement() {\r\n    return (\r\n      <IconButton\r\n        {...this.props}\r\n        disabled={this.state.disabled}\r\n        disableRipple={this.state.disabled}\r\n        onClick={this.props.onClick}\r\n      />\r\n    );\r\n  }\r\n\r\n  createButton() {\r\n    if (this.props.type && this.props.type === 'icon') {\r\n      return this.createIconButtonElement();\r\n    }\r\n    return this.createButtonElement(this.props.type);\r\n  }\r\n\r\n  render() {\r\n    return this.createButton();\r\n  }\r\n}\r\n\r\nexport default Button;\r\n"],"mappings":"AAuBA","sourceRoot":""}