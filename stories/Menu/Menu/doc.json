{
	"description": "Menus allow you to take an action by selecting from a list revealed upon opening a temporary, new sheet of material.",
	"displayName": "Menu",
	"methods": [
		{
			"name": "menuItemSelected",
			"docblock": null,
			"modifiers": [],
			"params": [
				{
					"name": "parameters",
					"type": null
				}
			],
			"returns": null
		},
		{
			"name": "getIcon",
			"docblock": null,
			"modifiers": [],
			"params": [
				{
					"name": "iconProp",
					"type": null
				}
			],
			"returns": null
		}
	],
	"props": {
		"classes": {
			"type": {
				"name": "object"
			},
			"required": false,
			"description": "@ignore"
		},
		"isMenuItemList": {
			"type": {
				"name": "bool"
			},
			"required": false,
			"description": "@ignore",
			"defaultValue": {
				"value": false,
				"computed": false
			}
		},
		"items": {
			"type": {
				"name": "array"
			},
			"required": false,
			"description": "Item list",
			"defaultValue": {
				"value": [],
				"computed": false
			}
		},
		"multiple": {
			"type": {
				"name": "bool"
			},
			"required": false,
			"description": "If true, `value` must be an array and the menu supports\nmultiple selections.",
			"defaultValue": {
				"value": false,
				"computed": false
			}
		},
		"onChange": {
			"type": {
				"name": "func"
			},
			"required": false,
			"description": "Callback function fired when a menu item with `value` not\nequal to the current `value` of the menu is touch-tapped.\n\n@param {object} event TouchTap event targeting the menu item.\n@param {any}  value If `multiple` is true, the menu's `value`\narray with either the menu item's `value` added (if\nit wasn't already selected) or omitted (if it was already selected).\nOtherwise, the `value` of the menu item."
		},
		"parentMenuItem": {
			"type": {
				"name": "object"
			},
			"required": false,
			"description": "ItemList Parents Info"
		},
		"primaryTextPadding": {
			"type": {
				"name": "any"
			},
			"required": false,
			"description": "Can be used to render primary text padding within the menu item."
		},
		"value": {
			"type": {
				"name": "any"
			},
			"required": false,
			"description": "If `multiple` is true, an array of the `value`s of the selected\nmenu items. Otherwise, the `value` of the selected menu item.\nIf provided, the menu will be a controlled component.\nThis component also supports valueLink."
		},
		"width": {
			"type": {
				"name": "union",
				"value": [
					{
						"name": "string"
					},
					{
						"name": "number"
					}
				]
			},
			"required": false,
			"description": "The width of the menu. If not specified, the menu's width\nwill be set according to the widths of its children, using\nproper keyline increments (64px for desktop, 56px otherwise)."
		}
	},
	"composes": [
		"@kuveytturk/boa-base"
	],
	"composeProps": {
		"packages/base/src/ComponentBase/index.js": {
			"componentSize": {
				"type": {
					"name": "enum",
					"value": [
						{
							"value": "ComponentSize.LARGE",
							"computed": true
						},
						{
							"value": "ComponentSize.MEDIUM",
							"computed": true
						},
						{
							"value": "ComponentSize.SMALL",
							"computed": true
						},
						{
							"value": "ComponentSize.XSMALL",
							"computed": true
						}
					]
				},
				"required": false,
				"description": "Defines size of the component. The ComponentSize constant is exported from enums.\n@ignore",
				"defaultValue": {
					"value": "ComponentSize.LARGE",
					"computed": true
				}
			},
			"context": {
				"type": {
					"name": "object"
				},
				"required": false,
				"description": "Defines application requirements such as localization, theme, platform."
			},
			"disabled": {
				"type": {
					"name": "bool"
				},
				"required": false,
				"description": "If true, all component functionalities are disabled.",
				"defaultValue": {
					"value": false,
					"computed": false
				}
			},
			"id": {
				"type": {
					"name": "string"
				},
				"required": false,
				"description": "All components must have an id prop."
			},
			"isVisible": {
				"type": {
					"name": "bool"
				},
				"required": false,
				"description": "@deprecated\n@ignore\nIn the ComponentComposer, we change the visibility of the component with this prop."
			},
			"newLine": {
				"type": {
					"name": "bool"
				},
				"required": false,
				"description": "As described in componentSize prop, if one of the components takes part in the new line\non a card we are using this prop.\n@ignore",
				"defaultValue": {
					"value": false,
					"computed": false
				}
			},
			"snapKey": {
				"type": {
					"name": "string"
				},
				"required": false,
				"description": "The snapKey property is used to manage snapshots of the child components.\n@ignore"
			},
			"snapshot": {
				"type": {
					"name": "object"
				},
				"required": false,
				"description": "In our SPA, we want to keep the state of each component when a page unmounts.\nAnd when the same page mounts again, the component mounts with the snapshot prop and\nit gets the previous state.\n@ignore"
			},
			"style": {
				"type": {
					"name": "object"
				},
				"required": false,
				"description": "All components must have a style prop."
			},
			"valueConstraint": {
				"type": {
					"name": "object"
				},
				"required": false,
				"description": "The valueConstraint is used for validations on components like limit, required, etc."
			},
			"visible": {
				"type": {
					"name": "bool"
				},
				"required": false,
				"description": "In the ComponentComposer, we change the visibility of the component with this prop.",
				"defaultValue": {
					"value": true,
					"computed": false
				}
			}
		}
	}
}