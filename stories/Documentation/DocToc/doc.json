{
	"description": "This component renders a table of content tree.\nIt supports `[{id, level, content, [children]}]` formatted JSONs.",
	"displayName": "DocToc",
	"methods": [
		{
			"name": "onClick",
			"docblock": null,
			"modifiers": [],
			"params": [
				{
					"name": "id",
					"type": null
				}
			],
			"returns": null
		},
		{
			"name": "getLinkStyle",
			"docblock": null,
			"modifiers": [],
			"params": [
				{
					"name": "content",
					"type": null
				},
				{
					"name": "isHeader",
					"type": null
				}
			],
			"returns": null
		},
		{
			"name": "getListItemStyle",
			"docblock": null,
			"modifiers": [],
			"params": [
				{
					"name": "level",
					"type": null
				},
				{
					"name": "index",
					"type": null
				}
			],
			"returns": null
		},
		{
			"name": "populateContent",
			"docblock": null,
			"modifiers": [],
			"params": [
				{
					"name": "children",
					"type": null
				},
				{
					"name": "level",
					"type": null
				}
			],
			"returns": null
		}
	],
	"props": {
		"activeItem": {
			"type": {
				"name": "string"
			},
			"required": false,
			"description": "Active item id on component."
		},
		"content": {
			"type": {
				"name": "array"
			},
			"required": false,
			"description": "Data for the table tree.",
			"defaultValue": {
				"value": [],
				"computed": false
			}
		},
		"header": {
			"type": {
				"name": "string"
			},
			"required": false,
			"description": "Header text of the component.",
			"defaultValue": {
				"value": "Contents",
				"computed": false
			}
		},
		"linkOnClick": {
			"type": {
				"name": "func"
			},
			"required": false,
			"description": "Event for item clicked."
		}
	},
	"composes": [
		"@kuveytturk/boa-base"
	],
	"composeProps": {
		"packages/base/src/ComponentBase/index.js": {
			"componentSize": {
				"type": {
					"name": "enum",
					"value": [
						{
							"value": "ComponentSize.LARGE",
							"computed": true
						},
						{
							"value": "ComponentSize.MEDIUM",
							"computed": true
						},
						{
							"value": "ComponentSize.SMALL",
							"computed": true
						},
						{
							"value": "ComponentSize.XSMALL",
							"computed": true
						}
					]
				},
				"required": false,
				"description": "Defines size of the component. The ComponentSize constant is exported from enums.\n@ignore",
				"defaultValue": {
					"value": "ComponentSize.LARGE",
					"computed": true
				}
			},
			"context": {
				"type": {
					"name": "object"
				},
				"required": false,
				"description": "Defines application requirements such as localization, theme, platform."
			},
			"disabled": {
				"type": {
					"name": "bool"
				},
				"required": false,
				"description": "If true, all component functionalities are disabled.",
				"defaultValue": {
					"value": false,
					"computed": false
				}
			},
			"id": {
				"type": {
					"name": "string"
				},
				"required": false,
				"description": "All components must have an id prop."
			},
			"isVisible": {
				"type": {
					"name": "bool"
				},
				"required": false,
				"description": "@deprecated\n@ignore\nIn the ComponentComposer, we change the visibility of the component with this prop."
			},
			"newLine": {
				"type": {
					"name": "bool"
				},
				"required": false,
				"description": "As described in componentSize prop, if one of the components takes part in the new line\non a card we are using this prop.\n@ignore",
				"defaultValue": {
					"value": false,
					"computed": false
				}
			},
			"snapKey": {
				"type": {
					"name": "string"
				},
				"required": false,
				"description": "The snapKey property is used to manage snapshots of the child components.\n@ignore"
			},
			"snapshot": {
				"type": {
					"name": "object"
				},
				"required": false,
				"description": "In our SPA, we want to keep the state of each component when a page unmounts.\nAnd when the same page mounts again, the component mounts with the snapshot prop and\nit gets the previous state.\n@ignore"
			},
			"style": {
				"type": {
					"name": "object"
				},
				"required": false,
				"description": "All components must have a style prop."
			},
			"valueConstraint": {
				"type": {
					"name": "object"
				},
				"required": false,
				"description": "The valueConstraint is used for validations on components like limit, required, etc."
			},
			"visible": {
				"type": {
					"name": "bool"
				},
				"required": false,
				"description": "In the ComponentComposer, we change the visibility of the component with this prop.",
				"defaultValue": {
					"value": true,
					"computed": false
				}
			}
		}
	}
}